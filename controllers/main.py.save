# -*- coding: utf-8 -*-

import binascii
from datetime import date

from odoo import fields, http, _
from odoo.exceptions import AccessError, MissingError
from odoo.http import request
from odoo.addons.portal.controllers.mail import _message_post_helper
from odoo.addons.portal.controllers.portal import CustomerPortal, pager as portal_pager, get_records_pager
from odoo.osv import expression
import logging

logger = logging.getLogger(__name__)


class CustomerPortal(CustomerPortal):

    def _prepare_portal_layout_values(self):
        values = super(CustomerPortal, self)._prepare_portal_layout_values()
        partner = request.env.user.partner_id
                # logger.warning('[DEBUG #5 values %s'%(services_line_count))

        ServiceOrder = request.env['services.tms']

        service_order_count = ServiceOrder.sudo().search_count([('supplier', '=', partner.id)])

        values.update({
            'service_order_count': service_order_count,
        })
        return values

    @http.route(['/my/service_lines', '/my/service_lines/page/<int:page>'], type='http', auth="user", website=True)
    def portal_my_service_lines(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):
        
        values = self._prepare_portal_layout_values()

        partner = request.env.user.partner_id

        ServiceOrder = request.env['repair.tms']

        domain = [('supplier', '=', partner.id)]

        searchbar_sortings = {
            'date': {'label': _('Newest'), 'order': 'create_date desc'},
             'name': {'label': _('Name'), 'order': 'name'},
        }

        archive_groups = self._get_archive_groups('services.tms', domain)

        if date_begin and date_end:
            domain += [('date_start', '>', date_begin), ('date_end', '<=', date_end)]

        service_count = ServiceOrder.search_count(domain)

        # pager
        pager = portal_pager(
            url="/my/service_line",
            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},
            total=service_line_count,
            page=page,
            step=self._items_per_page
        )

        service_lines = ServiceLine.sudo().search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])
        request.session['my_service_lines_history'] = service_lines.ids[:100]


        values.update({
            'date': date_begin,
            'service_lines': service_lines.sudo(),
            'page_name': 'service',
            'pager': pager,
            #'archive_groups': archive_groups,
            'default_url': '/my/service_lines',
            'searchbar_sortings': searchbar_sortings,
            'sortby': sortby,
        })

        return request.render("tms_service_portal.portal_my_service_lines", values)



